trigger: none

variables:
  - group: test-apk_secret

parameters:
  - name: bs_custom_id
    displayName: BrowserStack application id
    type: string
    default: 'FanAppIosStgLts'
    values:
      - FanAppIosStgLts
  - name: annotation_suite
    displayName: Select mission to test
    type: string
    default: 'pr_review'
    values:
      - loginSuccess
      - smoke
      - r1_smoke
      - r2_smoke
      - r1_all
      - r2_all
      - minor_adult_user
      - young_adult_user
      - adult_user
      - data_creation
      - regression
      - pr_review
      - missions
  - name: device_suite
    displayName: Select device to execute
    type: string
    default: 'iphone_15_os_17'
    values:
      - iphone_13_os_15
      - iphone_14_pro_max_os_16
      - iphone_14_pro_os_16
      - iphone_15_os_17
  - name: PublishArtifact
    displayName: Download and Publish artifact
    type: boolean
    default: 'true'
    values:
      - true
      - false
  - name: ArtifactVersion
    displayName: Version of artifact
    type: string
    default: 'UnknownAppVersion'
  - name: Threads
    displayName: Number of Threads
    default: '2'

name: FanApp-ios-${{ parameters.device_suite }}-${{ parameters.annotation_suite }}

pool:
  vmImage: 'ubuntu-latest'

jobs:
  - job: AutomationTest
    displayName: 'Automation Test'
    timeoutInMinutes: 180
    steps:
      - script: |
          echo "##vso[task.setvariable variable=slackMessage;]Deploy for service *${BUILD_DEFINITIONNAME}* is starting requested by ${BUILD_REQUESTEDFOR} \n*PR*: ${BUILD_SOURCEVERSIONMESSAGE}"
        displayName: 'Collected results'

      - task: PowerShell@2
        inputs:
          filePath: './devops/notification.ps1'
        env:
          slackMessage: $(slackMessage)
          Slack_WebHook: $(Slack_WebHook1)
          status: "initial"
        displayName: 'Slack Message'

      - ${{ if eq(parameters.PublishArtifact, true) }}:
          - task: DownloadPipelineArtifact@2
            condition: succeeded()
            displayName: 'DownloadPipelineArtifact iOS'
            inputs:
              buildType: 'specific'
              project: 'FanApp'
              branchName: 'develop'
              definition: '251'
              buildVersionToDownload: 'specific'
              pipelineId: '40102'
              artifactName: 'app'
              targetPath: '$(Pipeline.Workspace)'
          - script: |
              applicationPath="$(Pipeline.Workspace)/**/**.ipa"
              curl -u "$(BS_USERNAME):$(BS_PASSWORD)" -v \
              -X POST "https://api-cloud.browserstack.com/app-automate/upload" \
              -F "file=@${applicationPath}" \
              -F "custom_id=${{parameters.bs_custom_id}}"
            displayName: 'Upload iOS Artifact to BrowserStack'

      - script: |
          response=$(curl -u "${BS_USERNAME}:${BS_PASSWORD}" -X GET "https://api-cloud.browserstack.com/app-automate/recent_apps/${{ parameters.bs_custom_id }}")
          echo "Response $response"
          expected_response='{"message":"No results found"}'
          if [ "$response" == "$expected_response" ]; then
            echo "The custom_id ${{ parameters.bs_custom_id }} doesn't exist on BS"
            exit 1
          fi
        displayName: 'Validate Artifact BS'

      - task: JavaToolInstaller@0
        inputs:
          versionSpec: '17'
          jdkArchitectureOption: 'x64'
          jdkSourceOption: 'PreInstalled'

      - task: NodeTool@0
        inputs:
          versionSource: 'spec'
          versionSpec: '10.x'
        displayName: 'Install Nodejs'

      - script: |
          mvn install -DskipTests
        displayName: 'mvn install'

      - script: |
          cd lac-test
          mvn clean test \
          -DsuiteXmlFiles=fanapp/${{parameters.device_suite}}.xml \
          -Dframework.mobile.app.version="${{parameters.ArtifactVersion}}" \
          -Denvironment=stg \
          -Dcucumber.filter.tags="@${{parameters.annotation_suite}}" \
          -DthreadCount=${{parameters.Threads}} \
          -Dframework.mobile.app="${{parameters.bs_custom_id}}"
        continueOnError: true
        displayName: 'Run Tests'

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'specific'
          project: 'f989e8df-6bbf-44cc-af3e-43a80cc02b9a'
          pipeline: '270'
          buildVersionToDownload: 'latestFromBranch'
          branchName: $(Build.SourceBranch)
          allowPartiallySucceededBuilds: true
          tags: '${{parameters.device_suite}}-${{parameters.annotation_suite}}'
          artifactName: 'allure-history'
          targetPath: '$(System.DefaultWorkingDirectory)/lac-test/allure-results/history'
        displayName: 'Download Allure History'
        continueOnError: true

      - task: qameta.allure-azure-pipelines.PublishAllureReport.PublishAllureReport@1
        inputs:
          testResultsDir: lac-test/allure-results
          allureVersion: '2.27.0'
          reportName: 'Allure Report'
        displayName: 'Publish Allure Report'

      - script: |
          npm install -g allure-commandline --save-dev
          npx allure generate $(System.DefaultWorkingDirectory)/lac-test/allure-results -o $(System.DefaultWorkingDirectory)/lac-test/allure-web --clean
        displayName: 'Generate Manual Report'

      - publish: $(System.DefaultWorkingDirectory)/lac-test/allure-web/history
        artifact: allure-history
        displayName: 'Publish Allure History'

      - task: PowerShell@2
        displayName: 'Add Build Tag'
        inputs:
          targetType: 'inline'
          script: 'Write-Host "##vso[build.addbuildtag]${{parameters.device_suite}}-${{parameters.annotation_suite}}"'

      - script: |
          cd lac-test/allure-web/widgets
          summary=$(<summary.json jq -r '.statistic')
          more_info="<https://dev.azure.com/IntuitDome/${SYSTEM_TEAMPROJECT}/_build/results?buildId=${BUILD_BUILDID} |${BUILD_BUILDNUMBER}>"
          total=$(jq -r '.total' <<<"$summary")
          echo "##vso[task.setvariable variable=slackMessage;]Automated test executed from branch *${BUILD_SOURCEBRANCHNAME}* and platform iOS. \n*More info:* '$more_info' $total cases executed. \n*Results* \n:check-failed:*Failed*: $(jq -r '.failed' <<<"$summary") :construction:*Broken*: $(jq -r '.broken' <<<"$summary") :jenkins-yellow:*Skipped*: $(jq -r '.skipped' <<<"$summary") :check-passed:*Passed*: $(jq -r '.passed' <<<"$summary") :gear:*Unknown*: $(jq -r '.unknown' <<<"$summary")"
        displayName: 'Collected results'

      - task: PowerShell@2
        inputs:
          filePath: './devops/notification.ps1'
        env:
          slackMessage: $(slackMessage)
          Slack_WebHook: $(Slack_WebHook1)
          status: "final"
        displayName: 'Slack Message'
